[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesnâ€™t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/Hw177/Untitled1.html",
    "href": "posts/Hw177/Untitled1.html",
    "title": "Myblog",
    "section": "",
    "text": "import sqlite3\nimport pandas as pd\ndef query_climate_database(db_file, country, year_begin, year_end, month):\n    conn=sqlite3.connect(db_file) \n    c = conn.cursor()\n\n    # Construct the SQL query using f-strings\n    sql_query = f\"\"\"\n        SELECT S.NAME AS Name, S.LATITUDE AS Latitude, S.LONGITUDE AS Longitude, C.Name AS Name, \n               T.Year, T.Month,T.Temp\n        FROM temperatures T\n        LEFT JOIN stations S ON T.ID = S.ID\n        LEFT JOIN countries C ON SUBSTR(S.ID, 1, 2) = C.'FIPS 10-4'\n        WHERE C.Name = '{country}'\n          AND T.Year BETWEEN {year_begin} AND {year_end}\n          AND T.Month = {month}\n        GROUP BY S.NAME, T.Year, T.Month\n    \"\"\"\n\n    # Execute the SQL query and fetch the results into a DataFrame\n    df = pd.read_sql_query(sql_query, conn)\n\n    # Close the database connection\n    conn.close()\n\n    return df\n\n\nquery_climate_database(db_file = \"your_database_file.db\",\n                       country = \"India\", \n                       year_begin = 1980, \n                       year_end = 2020,\n                       month = 1)\n\nDatabaseError: Execution failed on sql '\n        SELECT S.NAME AS Name, S.LATITUDE AS Latitude, S.LONGITUDE AS Longitude, C.Name AS Name, \n               T.Year, T.Month,T.Temp\n        FROM temperatures T\n        LEFT JOIN stations S ON T.ID = S.ID\n        LEFT JOIN countries C ON SUBSTR(S.ID, 1, 2) = C.'FIPS 10-4'\n        WHERE C.Name = 'India'\n          AND T.Year BETWEEN 1980 AND 2020\n          AND T.Month = 1\n        GROUP BY S.NAME, T.Year, T.Month\n    ': no such table: temperatures"
  },
  {
    "objectID": "posts/Hw1/Untitled1.html",
    "href": "posts/Hw1/Untitled1.html",
    "title": "Myblog",
    "section": "",
    "text": "import sqlite3\nimport pandas as pd\ndef query_climate_database(db_file, country, year_begin, year_end, month):\n    conn=sqlite3.connect(db_file) \n    c = conn.cursor()\n\n    # Construct the SQL query using f-strings\n    sql_query = f\"\"\"\n        SELECT S.NAME AS Name, S.LATITUDE AS Latitude, S.LONGITUDE AS Longitude, C.Name AS Name, \n               T.Year, T.Month,T.Temp\n        FROM temperatures T\n        LEFT JOIN stations S ON T.ID = S.ID\n        LEFT JOIN countries C ON SUBSTR(S.ID, 1, 2) = C.'FIPS 10-4'\n        WHERE C.Name = '{country}'\n          AND T.Year BETWEEN {year_begin} AND {year_end}\n          AND T.Month = {month}\n        GROUP BY S.NAME, T.Year, T.Month\n    \"\"\"\n\n    # Execute the SQL query and fetch the results into a DataFrame\n    df = pd.read_sql_query(sql_query, conn)\n\n    # Close the database connection\n    conn.close()\n\n    return df\n\n\nquery_climate_database(db_file = \"your_database_file.db\",\n                       country = \"India\", \n                       year_begin = 1980, \n                       year_end = 2020,\n                       month = 1)\n\nDatabaseError: Execution failed on sql '\n        SELECT S.NAME AS Name, S.LATITUDE AS Latitude, S.LONGITUDE AS Longitude, C.Name AS Name, \n               T.Year, T.Month,T.Temp\n        FROM temperatures T\n        LEFT JOIN stations S ON T.ID = S.ID\n        LEFT JOIN countries C ON SUBSTR(S.ID, 1, 2) = C.'FIPS 10-4'\n        WHERE C.Name = 'India'\n          AND T.Year BETWEEN 1980 AND 2020\n          AND T.Month = 1\n        GROUP BY S.NAME, T.Year, T.Month\n    ': no such table: temperatures"
  },
  {
    "objectID": "posts/bruin/Index1.html",
    "href": "posts/bruin/Index1.html",
    "title": "Creating posts",
    "section": "",
    "text": "import plotly.express as px \nimport pandas as pd\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)\n\n\ndf= penguins \n# changed the name of data frame to make it easier to work with\n\n\n# in order to isnpect the data I printed out the first five rows so I could see the variables I need to work with \ndf.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n0\nPAL0708\n1\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A1\nYes\n11/11/07\n39.1\n18.7\n181.0\n3750.0\nMALE\nNaN\nNaN\nNot enough blood for isotopes.\n\n\n1\nPAL0708\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A2\nYes\n11/11/07\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n8.94956\n-24.69454\nNaN\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n11/16/07\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n3\nPAL0708\n4\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A2\nYes\n11/16/07\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nAdult not sampled.\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n11/16/07\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN\n\n\n\n\n\n\n\n\n\n\n\n\n\ndf=df[df.Sex.notnull()]\n\ncolumes=(['Species','Region', 'Island', 'Sex', 'Culmen Length (mm)','Culmen Depth (mm)','Flipper Length (mm)', 'Body Mass (g)'])\ndfnew=df[columes]\n# this creats a new data fram with the selected columes that I want to be analyzing in my visualization \n\n\ndfnew.head()\n\n\n\n\n\n\n\n\nSpecies\nRegion\nIsland\nSex\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\n\n\n\n\n0\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nMALE\n39.1\n18.7\n181.0\n3750.0\n\n\n1\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nFEMALE\n39.5\n17.4\n186.0\n3800.0\n\n\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nFEMALE\n40.3\n18.0\n195.0\n3250.0\n\n\n4\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nFEMALE\n36.7\n19.3\n193.0\n3450.0\n\n\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nMALE\n39.3\n20.6\n190.0\n3650.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfig=px.scatter(df,x='Flipper Length (mm)',\n               y='Body Mass (g)',\n              color='Species',\n              title='Flipper Length vs Body Mass')\n# this creats a scatter plot that represents the X and Y varaibles as well as distingues speices by color \nfig.show()"
  },
  {
    "objectID": "posts/bruin/Index1.html#hw0",
    "href": "posts/bruin/Index1.html#hw0",
    "title": "Creating posts",
    "section": "",
    "text": "import plotly.express as px \nimport pandas as pd\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)\n\n\ndf= penguins \n# changed the name of data frame to make it easier to work with\n\n\n# in order to isnpect the data I printed out the first five rows so I could see the variables I need to work with \ndf.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n0\nPAL0708\n1\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A1\nYes\n11/11/07\n39.1\n18.7\n181.0\n3750.0\nMALE\nNaN\nNaN\nNot enough blood for isotopes.\n\n\n1\nPAL0708\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A2\nYes\n11/11/07\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n8.94956\n-24.69454\nNaN\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n11/16/07\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n3\nPAL0708\n4\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A2\nYes\n11/16/07\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nAdult not sampled.\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n11/16/07\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN\n\n\n\n\n\n\n\n\n\n\n\n\n\ndf=df[df.Sex.notnull()]\n\ncolumes=(['Species','Region', 'Island', 'Sex', 'Culmen Length (mm)','Culmen Depth (mm)','Flipper Length (mm)', 'Body Mass (g)'])\ndfnew=df[columes]\n# this creats a new data fram with the selected columes that I want to be analyzing in my visualization \n\n\ndfnew.head()\n\n\n\n\n\n\n\n\nSpecies\nRegion\nIsland\nSex\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\n\n\n\n\n0\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nMALE\n39.1\n18.7\n181.0\n3750.0\n\n\n1\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nFEMALE\n39.5\n17.4\n186.0\n3800.0\n\n\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nFEMALE\n40.3\n18.0\n195.0\n3250.0\n\n\n4\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nFEMALE\n36.7\n19.3\n193.0\n3450.0\n\n\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nMALE\n39.3\n20.6\n190.0\n3650.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfig=px.scatter(df,x='Flipper Length (mm)',\n               y='Body Mass (g)',\n              color='Species',\n              title='Flipper Length vs Body Mass')\n# this creats a scatter plot that represents the X and Y varaibles as well as distingues speices by color \nfig.show()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Myblog",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nJan 22, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nJan 19, 2024\n\n\nNeomi Goodman\n\n\n\n\n\n\n  \n\n\n\n\nHW 1, Database\n\n\n\n\n\n\n\nweek 4\n\n\nHW 1\n\n\n\n\n\n\n\n\n\n\n\nJan 29, 2023\n\n\nNeomi Goodman\n\n\n\n\n\n\n  \n\n\n\n\nCreating posts\n\n\n\n\n\n\n\nweek 0\n\n\nHW 0\n\n\n\n\n\n\n\n\n\n\n\nJan 22, 2023\n\n\nNeomi Goodman\n\n\n\n\n\n\n  \n\n\n\n\nCreating posts\n\n\n\n\n\n\n\nweek 0\n\n\nHW 0\n\n\n\n\n\n\n\n\n\n\n\nJan 22, 2023\n\n\nNeomi Goodman\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/bruin/index.html",
    "href": "posts/bruin/index.html",
    "title": "Creating posts",
    "section": "",
    "text": "### Import all the data and plotly libary\n\nimport plotly.express as px \nimport pandas as pd\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)\n\n\ndf= penguins \n# changed the name of data frame to make it easier to work with\n\n\n# in order to isnpect the data I printed out the first five rows so I could see the variables I need to work with \ndf.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n0\nPAL0708\n1\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A1\nYes\n11/11/07\n39.1\n18.7\n181.0\n3750.0\nMALE\nNaN\nNaN\nNot enough blood for isotopes.\n\n\n1\nPAL0708\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A2\nYes\n11/11/07\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n8.94956\n-24.69454\nNaN\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n11/16/07\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n3\nPAL0708\n4\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A2\nYes\n11/16/07\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nAdult not sampled.\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n11/16/07\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN\n\n\n\n\n\n\n\n\n\n\n\n\ndf=df[df.Sex.notnull()]\n\ncolumes=(['Species','Region', 'Island', 'Sex', 'Culmen Length (mm)','Culmen Depth (mm)','Flipper Length (mm)', 'Body Mass (g)'])\ndfnew=df[columes]\n# this creats a new data fram with the selected columes that I want to be analyzing in my visualization \n\n\ndfnew.head()\n\n\n\n\n\n\n\n\nSpecies\nRegion\nIsland\nSex\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\n\n\n\n\n0\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nMALE\n39.1\n18.7\n181.0\n3750.0\n\n\n1\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nFEMALE\n39.5\n17.4\n186.0\n3800.0\n\n\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nFEMALE\n40.3\n18.0\n195.0\n3250.0\n\n\n4\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nFEMALE\n36.7\n19.3\n193.0\n3450.0\n\n\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nMALE\n39.3\n20.6\n190.0\n3650.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfig=px.scatter(df,x='Flipper Length (mm)',\n               y='Body Mass (g)',\n              color='Species',\n              title='Flipper Length vs Body Mass')\n# this creats a scatter plot that represents the X and Y varaibles as well as distingues speices by color \nfig.show()"
  },
  {
    "objectID": "posts/bruin/index.html#hw0",
    "href": "posts/bruin/index.html#hw0",
    "title": "Creating posts",
    "section": "",
    "text": "### Import all the data and plotly libary\n\nimport plotly.express as px \nimport pandas as pd\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)\n\n\ndf= penguins \n# changed the name of data frame to make it easier to work with\n\n\n# in order to isnpect the data I printed out the first five rows so I could see the variables I need to work with \ndf.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n0\nPAL0708\n1\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A1\nYes\n11/11/07\n39.1\n18.7\n181.0\n3750.0\nMALE\nNaN\nNaN\nNot enough blood for isotopes.\n\n\n1\nPAL0708\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A2\nYes\n11/11/07\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n8.94956\n-24.69454\nNaN\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n11/16/07\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n3\nPAL0708\n4\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A2\nYes\n11/16/07\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nAdult not sampled.\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n11/16/07\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN\n\n\n\n\n\n\n\n\n\n\n\n\ndf=df[df.Sex.notnull()]\n\ncolumes=(['Species','Region', 'Island', 'Sex', 'Culmen Length (mm)','Culmen Depth (mm)','Flipper Length (mm)', 'Body Mass (g)'])\ndfnew=df[columes]\n# this creats a new data fram with the selected columes that I want to be analyzing in my visualization \n\n\ndfnew.head()\n\n\n\n\n\n\n\n\nSpecies\nRegion\nIsland\nSex\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\n\n\n\n\n0\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nMALE\n39.1\n18.7\n181.0\n3750.0\n\n\n1\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nFEMALE\n39.5\n17.4\n186.0\n3800.0\n\n\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nFEMALE\n40.3\n18.0\n195.0\n3250.0\n\n\n4\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nFEMALE\n36.7\n19.3\n193.0\n3450.0\n\n\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nMALE\n39.3\n20.6\n190.0\n3650.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfig=px.scatter(df,x='Flipper Length (mm)',\n               y='Body Mass (g)',\n              color='Species',\n              title='Flipper Length vs Body Mass')\n# this creats a scatter plot that represents the X and Y varaibles as well as distingues speices by color \nfig.show()"
  },
  {
    "objectID": "posts/Hw001/index.html",
    "href": "posts/Hw001/index.html",
    "title": "HW 1, Database",
    "section": "",
    "text": "# import all packages I might need \nimport pandas as pd \nimport sqlite3\n\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom plotly.io import write_html\nimport plotly.express as px\n\n\n\n\n\n# create a database called db_file \nconn= sqlite3.connect(\"db_file\")\n\n\n\n\ndf = pd.read_csv(\"temps.csv\")\ndf_iter = pd.read_csv(\"temps.csv\", chunksize = 100000)\n\n\n#clean and prepare the data \ndef prepare_df(df):\n    df = df.set_index(keys=[\"ID\", \"Year\"])\n    df = df.stack()\n    df = df.reset_index()\n    df = df.rename(columns = {\"level_2\"  : \"Month\" , 0 : \"Temp\"})\n    df[\"Month\"] = df[\"Month\"].str[5:].astype(int)\n    df[\"Temp\"]  = df[\"Temp\"] / 100\n    return(df)\n\n\ndf = prepare_df(df)\n\n\n#creat a table with the temperature data\nfor i, df in enumerate(df_iter):\n    df = prepare_df(df)\n    df.to_sql(\"temperatures\", conn, if_exists = \"replace\" if i == 0 else \"append\", index = False)\n\n\n#creats a table with all the stations \nurl = \"station-metadata.csv\"\nstations = pd.read_csv(url)\nstations.to_sql(\"stations\", conn, if_exists = \"replace\", index=False)\n\n27585\n\n\n\n#creats a table with all the countries \ncountries_url = \"https://raw.githubusercontent.com/mysociety/gaze/master/data/fips-10-4-to-iso-country-codes.csv\"\ncountries= pd.read_csv(countries_url)\ncountries.to_sql(\"countries\", conn, if_exists = \"replace\", index=False)\n\n279\n\n\n\n\n\n\n\n#to make sure we have created the database with the three tables we wanted we print a list with our tables\ncursor = conn.cursor()\ncursor.execute(\"SELECT name FROM sqlite_master WHERE type='table'\")\nprint(cursor.fetchall())\n\n[('temperatures',), ('stations',), ('countries',)]\n\n\n\ncursor.execute(\"SELECT sql FROM sqlite_master WHERE type='table';\")\n\nfor result in cursor.fetchall():\n    print(result[0])\n\nCREATE TABLE \"temperatures\" (\n\"ID\" TEXT,\n  \"Year\" INTEGER,\n  \"Month\" INTEGER,\n  \"Temp\" REAL\n)\nCREATE TABLE \"stations\" (\n\"ID\" TEXT,\n  \"LATITUDE\" REAL,\n  \"LONGITUDE\" REAL,\n  \"STNELEV\" REAL,\n  \"NAME\" TEXT\n)\nCREATE TABLE \"countries\" (\n\"FIPS 10-4\" TEXT,\n  \"ISO 3166\" TEXT,\n  \"Name\" TEXT\n)\n\n\n\n\n\n\ncmd = \\\n\"\"\"\nSELECT T.id, T.month, T.temp\nFROM temperatures T\nLEFT JOIN countries C ON SUBSTR(T.id, 1, 2) = SUBSTR(C.\"FIPS 10-4\", 1, 2)\nLEFT JOIN stations S ON SUBSTR(T.id, 1, 2) = SUBSTR(S.id, 1, 2)\nWHERE C.Name IS NOT NULL\n\n\"\"\"\ncursor = conn.cursor()\ncursor.execute(cmd)\nresult = [cursor.fetchone() for i in range(10)]  # get just the first 10 results\nresult\n\n[('AFM00040911', 1, 2.99),\n ('AFM00040911', 1, 2.99),\n ('AFM00040911', 1, 2.99),\n ('AFM00040911', 1, 2.99),\n ('AFM00040911', 1, 2.99),\n ('AFM00040911', 1, 2.99),\n ('AFM00040911', 2, 8.09),\n ('AFM00040911', 2, 8.09),\n ('AFM00040911', 2, 8.09),\n ('AFM00040911', 2, 8.09)]\n\n\n\nconn.close()\n\n\n\n\n\n\n\n\n\n\ndef query_climate_database(db_file, country, year_begin, year_end, month):\n    \n   # this connects it to the database we created earlier \n    conn= sqlite3.connect(db_file)\n    \n    query = f\"\"\"\n    SELECT S.NAME AS Name, S.LATITUDE AS Latitude, S.LONGITUDE AS Longitude, C.Name AS Country,\n           T.Year, T.Month, AVG(T.Temp) AS Temp\n    FROM temperatures T\n    LEFT JOIN stations S ON T.ID = S.ID\n    LEFT JOIN countries C ON SUBSTR(S.ID, 1, 2) = C.'FIPS 10-4'\n    WHERE C.Name = '{country}'\n          AND T.Year BETWEEN {year_begin} AND {year_end}\n          AND T.Month = {month}\n    GROUP BY S.NAME, T.Year, T.Month\n   \"\"\"\n    \n    df = pd.read_sql_query(query, conn)\n    # this closes the database connction \n    conn.close()\n   \n    return df\n\n\nquery_climate_database(db_file = \"db_file\",\n                       country = \"India\", \n                       year_begin = 1980, \n                       year_end = 2020,\n                       month = 1)\n\n\n\n\n\n\n\n\nName\nLatitude\nLongitude\nCountry\nYear\nMonth\nTemp\n\n\n\n\n0\nAGARTALA\n23.883\n91.250\nIndia\n1980\n1\n18.21\n\n\n1\nAGARTALA\n23.883\n91.250\nIndia\n1981\n1\n18.25\n\n\n2\nAGARTALA\n23.883\n91.250\nIndia\n1982\n1\n19.31\n\n\n3\nAGARTALA\n23.883\n91.250\nIndia\n1985\n1\n19.25\n\n\n4\nAGARTALA\n23.883\n91.250\nIndia\n1988\n1\n19.54\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3115\nVISHAKHAPATNAM\n17.717\n83.233\nIndia\n2016\n1\n25.09\n\n\n3116\nVISHAKHAPATNAM\n17.717\n83.233\nIndia\n2017\n1\n23.90\n\n\n3117\nVISHAKHAPATNAM\n17.717\n83.233\nIndia\n2018\n1\n22.65\n\n\n3118\nVISHAKHAPATNAM\n17.717\n83.233\nIndia\n2019\n1\n22.20\n\n\n3119\nVISHAKHAPATNAM\n17.717\n83.233\nIndia\n2020\n1\n23.75\n\n\n\n\n3120 rows Ã— 7 columns\n\n\n\n\n\n\n\n\n\n# I first created a function to calculate the yearly temp coefficient so I will not have to do this calculation within my next function and the work would be presented more clearly \n\ndef calc_temp_coefficient(data_group):\n    x = data_group[['Year']].values\n    y = data_group['Temp'].values\n    if len(x) &lt; 2:\n        return np.nan  # this is in case there is not enough data to caluclate the regression \n    lr = LinearRegression()\n    lr.fit(x, y)\n    return round(lr.coef_[0], 5) \n\n# a function that shows how the average yearly change in temperature vary within a given country\n\ndef temperature_coefficient_plot(db_file, country, year_begin, year_end, month, min_obs=10 ,**kwargs): \n    conn=sqlite3.connect(\"db_file\")\n    \n    # SQL query to get the temperature data for a the specified country in a year range and month\n    query = f\"\"\"\n    SELECT S.NAME AS Station_Name, S.LATITUDE AS Latitude, S.LONGITUDE AS Longitude,\n           C.Name AS Country, T.Year, T.Month, AVG(T.Temp) AS Temp\n    FROM temperatures T\n    LEFT JOIN stations S ON T.ID = S.ID\n    LEFT JOIN countries C ON SUBSTR(S.ID, 1, 2) = C.'FIPS 10-4'\n    WHERE C.Name = '{country}'\n          AND T.Year BETWEEN {year_begin} AND {year_end}\n          AND T.Month = {month}\n    GROUP BY S.NAME, T.Year, T.Month\n    \"\"\"\n  \n    # I used .read_sql_querey to read the dtatbase datat and store it as Pandas DataFrame\n    df = pd.read_sql_query(query, conn)\n    \n    # filter stations with at least min_obs years of data value and group them by the station ID \n    df = df.groupby('Station_Name').filter(lambda x: x['Year'].count() &gt;= min_obs)\n    \n   \n     # Calculate the estimated yearly temperature increase for each station\n    yearly_changes = df.groupby('Station_Name').apply(\n        lambda group: calc_temp_coefficient(group)\n    ).reset_index(name='Estimated Yearly Increase (Â°C)')\n    \n    \n     # Create a Plotly Express scatter mapbox plot\n    fig = px.scatter_mapbox(\n        df,\n        lat='Latitude',\n        lon='Longitude',\n        hover_name='Station_Name',\n        color='Temp',  # Use the calculated column as color\n        height=600,\n        **kwargs\n    )\n    \n    # Set layout options and styling for the plot\n    fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n    \n    # Return the figure\n    return fig\n\n\n\n\n\n\n\nfrom climate_database import query_climate_database\nfrom climate_database import calc_temp_coefficient\nfrom climate_database import temperature_coefficient_plot\n\nimport inspect\n#print(inspect.getsource(query_climate_database))\n#print(inspect.getsource(calc_temp_coefficient))\n#print(inspect.getsource(temperature_coefficient_plot))\n\n\n\n\ncolor_map = px.colors.diverging.RdGy_r # choose a colormap\n\nfig = temperature_coefficient_plot(db_file=\"db_file\",country=\"India\",year_begin=1980, year_end=2020, month=1, \n                                   min_obs = 10,\n                                   zoom = 2,\n                                   mapbox_style=\"carto-positron\",\n                                   color_continuous_scale=color_map,\n                                   title=\"Estimates of the Yearly Temperature increase in India \")\n\n\nfig.show()\n\n\n                                                \n\n\n\ncolor_map = px.colors.diverging.RdGy_r # choose a colormap\n\nfig = temperature_coefficient_plot(db_file=\"db_file\",country=\"France\",year_begin=1980, year_end=2020, month=9, \n                                   min_obs = 10,\n                                   zoom = 2,\n                                   mapbox_style=\"carto-positron\",\n                                   color_continuous_scale=color_map,\n                                   title=\"Estimates of the Yearly Temperature increase in France\")\n\nfig.show()\n\n\n                                                \n\n\n\n\n\n\n\n\n\n\nfrom climate_database import analyze_seasonal_temperature_change\n\n\nimport inspect\nprint(inspect.getsource(analyze_seasonal_temperature_change))\n\ndef analyze_seasonal_temperature_change(db_file, season, country=None, year_range=None):\n    # Connect to the database\n    conn = sqlite3.connect(db_file)\n    \n    # Define the SQL query to retrieve temperature data for the specified season\n    query = f\"\"\"\n    SELECT T.Year,\n           CASE\n               WHEN T.Month BETWEEN 3 AND 5 THEN 'Spring'\n               WHEN T.Month BETWEEN 6 AND 8 THEN 'Summer'\n               WHEN T.Month BETWEEN 9 AND 11 THEN 'Fall'\n               ELSE 'Winter'\n           END AS Season,\n           AVG(T.Temp) AS Avg_Temperature\n    FROM temperatures T\n    LEFT JOIN stations S ON T.ID = S.ID\n    LEFT JOIN countries C ON SUBSTR(S.ID, 1, 2) = C.'FIPS 10-4'\n    \"\"\"\n    \n    # Add conditions for year range and country filter if provided\n    if year_range:\n        query += f\" WHERE T.Year BETWEEN {year_range[0]} AND {year_range[1]}\"\n        if country:\n            query += f\" AND C.Name = '{country}'\"\n    elif country:\n        query += f\" WHERE C.Name = '{country}'\"\n    \n    # Group the data by year and season\n    query += \" GROUP BY T.Year, Season\"\n    \n    # Execute the query and read the results into a DataFrame\n    df = pd.read_sql_query(query, conn)\n    \n    # Close the database connection\n    conn.close()\n   \n    # Visualize the data\n    fig = px.bar(df, x='Season', y='Avg_Temperature', color='Season', title=f'Average Temperature in {season}')\n    fig.show()\n    \n    return fig\n\n\n\n\ndb_file = \"db_file\"\n\n# Define the year range\nyear_range = (2000, 2020)\n\n# Define the country (optional)\ncountry = \"USA\"\n\n# Call the function\nanalyze_seasonal_temperature_change(db_file, year_range)\n\n\n\n\n\nimport plotly.express as px\n\ndef visualize_avg_monthly_temperature_by_country(df):\n    fig = px.line(df, x='Month', y='Avg_Temperature', title='Average Monthly Temperature by Country')\n    return fig\n\ndef get_data_from_database(db_file):\n    conn = sqlite3.connect(db_file)\n    query = \"SELECT * FROM temperatures\"  # Adjust your SQL query accordingly\n    df = pd.read_sql_query(query, conn)\n    conn.close()\n    return df\n\n\nmy_df = get_data_from_database(\"db_file\")\nfig = visualize_avg_monthly_temperature_by_country(my_df)\n\nValueError: Value of 'y' is not the name of a column in 'data_frame'. Expected one of ['ID', 'Year', 'Month', 'Temp'] but received: Avg_Temperature\n\n\n\ndef visualize_monthly_temperature_trends_for_station(df):\n    fig = px.line(df, x='Month', y='Temp', color='Year', title='Monthly Temperature Trends for a Specific Station')\n    return fig"
  },
  {
    "objectID": "posts/Hw001/index.html#part-2-create-a-query-function",
    "href": "posts/Hw001/index.html#part-2-create-a-query-function",
    "title": "HW 1, Database",
    "section": "",
    "text": "def query_climate_database(db_file, country, year_begin, year_end, month):\n    \n   # this connects it to the database we created earlier \n    conn= sqlite3.connect(db_file)\n    \n    query = f\"\"\"\n    SELECT S.NAME AS Name, S.LATITUDE AS Latitude, S.LONGITUDE AS Longitude, C.Name AS Country,\n           T.Year, T.Month, AVG(T.Temp) AS Temp\n    FROM temperatures T\n    LEFT JOIN stations S ON T.ID = S.ID\n    LEFT JOIN countries C ON SUBSTR(S.ID, 1, 2) = C.'FIPS 10-4'\n    WHERE C.Name = '{country}'\n          AND T.Year BETWEEN {year_begin} AND {year_end}\n          AND T.Month = {month}\n    GROUP BY S.NAME, T.Year, T.Month\n   \"\"\"\n    \n    df = pd.read_sql_query(query, conn)\n    # this closes the database connction \n    conn.close()\n   \n    return df\n\n\nquery_climate_database(db_file = \"db_file\",\n                       country = \"India\", \n                       year_begin = 1980, \n                       year_end = 2020,\n                       month = 1)\n\n\n\n\n\n\n\n\nName\nLatitude\nLongitude\nCountry\nYear\nMonth\nTemp\n\n\n\n\n0\nAGARTALA\n23.883\n91.250\nIndia\n1980\n1\n18.21\n\n\n1\nAGARTALA\n23.883\n91.250\nIndia\n1981\n1\n18.25\n\n\n2\nAGARTALA\n23.883\n91.250\nIndia\n1982\n1\n19.31\n\n\n3\nAGARTALA\n23.883\n91.250\nIndia\n1985\n1\n19.25\n\n\n4\nAGARTALA\n23.883\n91.250\nIndia\n1988\n1\n19.54\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3115\nVISHAKHAPATNAM\n17.717\n83.233\nIndia\n2016\n1\n25.09\n\n\n3116\nVISHAKHAPATNAM\n17.717\n83.233\nIndia\n2017\n1\n23.90\n\n\n3117\nVISHAKHAPATNAM\n17.717\n83.233\nIndia\n2018\n1\n22.65\n\n\n3118\nVISHAKHAPATNAM\n17.717\n83.233\nIndia\n2019\n1\n22.20\n\n\n3119\nVISHAKHAPATNAM\n17.717\n83.233\nIndia\n2020\n1\n23.75\n\n\n\n\n3120 rows Ã— 7 columns"
  },
  {
    "objectID": "posts/Hw001/index.html#part-3-create-an-interactive-viusalization",
    "href": "posts/Hw001/index.html#part-3-create-an-interactive-viusalization",
    "title": "HW 1, Database",
    "section": "",
    "text": "# I first created a function to calculate the yearly temp coefficient so I will not have to do this calculation within my next function and the work would be presented more clearly \n\ndef calc_temp_coefficient(data_group):\n    x = data_group[['Year']].values\n    y = data_group['Temp'].values\n    if len(x) &lt; 2:\n        return np.nan  # this is in case there is not enough data to caluclate the regression \n    lr = LinearRegression()\n    lr.fit(x, y)\n    return round(lr.coef_[0], 5) \n\n# a function that shows how the average yearly change in temperature vary within a given country\n\ndef temperature_coefficient_plot(db_file, country, year_begin, year_end, month, min_obs=10 ,**kwargs): \n    conn=sqlite3.connect(\"db_file\")\n    \n    # SQL query to get the temperature data for a the specified country in a year range and month\n    query = f\"\"\"\n    SELECT S.NAME AS Station_Name, S.LATITUDE AS Latitude, S.LONGITUDE AS Longitude,\n           C.Name AS Country, T.Year, T.Month, AVG(T.Temp) AS Temp\n    FROM temperatures T\n    LEFT JOIN stations S ON T.ID = S.ID\n    LEFT JOIN countries C ON SUBSTR(S.ID, 1, 2) = C.'FIPS 10-4'\n    WHERE C.Name = '{country}'\n          AND T.Year BETWEEN {year_begin} AND {year_end}\n          AND T.Month = {month}\n    GROUP BY S.NAME, T.Year, T.Month\n    \"\"\"\n  \n    # I used .read_sql_querey to read the dtatbase datat and store it as Pandas DataFrame\n    df = pd.read_sql_query(query, conn)\n    \n    # filter stations with at least min_obs years of data value and group them by the station ID \n    df = df.groupby('Station_Name').filter(lambda x: x['Year'].count() &gt;= min_obs)\n    \n   \n     # Calculate the estimated yearly temperature increase for each station\n    yearly_changes = df.groupby('Station_Name').apply(\n        lambda group: calc_temp_coefficient(group)\n    ).reset_index(name='Estimated Yearly Increase (Â°C)')\n    \n    \n     # Create a Plotly Express scatter mapbox plot\n    fig = px.scatter_mapbox(\n        df,\n        lat='Latitude',\n        lon='Longitude',\n        hover_name='Station_Name',\n        color='Temp',  # Use the calculated column as color\n        height=600,\n        **kwargs\n    )\n    \n    # Set layout options and styling for the plot\n    fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n    \n    # Return the figure\n    return fig\n\n\n\n\n\n\n\nfrom climate_database import query_climate_database\nfrom climate_database import calc_temp_coefficient\nfrom climate_database import temperature_coefficient_plot\n\nimport inspect\n#print(inspect.getsource(query_climate_database))\n#print(inspect.getsource(calc_temp_coefficient))\n#print(inspect.getsource(temperature_coefficient_plot))\n\n\n\n\ncolor_map = px.colors.diverging.RdGy_r # choose a colormap\n\nfig = temperature_coefficient_plot(db_file=\"db_file\",country=\"India\",year_begin=1980, year_end=2020, month=1, \n                                   min_obs = 10,\n                                   zoom = 2,\n                                   mapbox_style=\"carto-positron\",\n                                   color_continuous_scale=color_map,\n                                   title=\"Estimates of the Yearly Temperature increase in India \")\n\n\nfig.show()\n\n\n                                                \n\n\n\ncolor_map = px.colors.diverging.RdGy_r # choose a colormap\n\nfig = temperature_coefficient_plot(db_file=\"db_file\",country=\"France\",year_begin=1980, year_end=2020, month=9, \n                                   min_obs = 10,\n                                   zoom = 2,\n                                   mapbox_style=\"carto-positron\",\n                                   color_continuous_scale=color_map,\n                                   title=\"Estimates of the Yearly Temperature increase in France\")\n\nfig.show()"
  },
  {
    "objectID": "posts/Hw001/index.html#part-4-creating-two-additional-visuals",
    "href": "posts/Hw001/index.html#part-4-creating-two-additional-visuals",
    "title": "HW 1, Database",
    "section": "",
    "text": "from climate_database import analyze_seasonal_temperature_change\n\n\nimport inspect\nprint(inspect.getsource(analyze_seasonal_temperature_change))\n\ndef analyze_seasonal_temperature_change(db_file, season, country=None, year_range=None):\n    # Connect to the database\n    conn = sqlite3.connect(db_file)\n    \n    # Define the SQL query to retrieve temperature data for the specified season\n    query = f\"\"\"\n    SELECT T.Year,\n           CASE\n               WHEN T.Month BETWEEN 3 AND 5 THEN 'Spring'\n               WHEN T.Month BETWEEN 6 AND 8 THEN 'Summer'\n               WHEN T.Month BETWEEN 9 AND 11 THEN 'Fall'\n               ELSE 'Winter'\n           END AS Season,\n           AVG(T.Temp) AS Avg_Temperature\n    FROM temperatures T\n    LEFT JOIN stations S ON T.ID = S.ID\n    LEFT JOIN countries C ON SUBSTR(S.ID, 1, 2) = C.'FIPS 10-4'\n    \"\"\"\n    \n    # Add conditions for year range and country filter if provided\n    if year_range:\n        query += f\" WHERE T.Year BETWEEN {year_range[0]} AND {year_range[1]}\"\n        if country:\n            query += f\" AND C.Name = '{country}'\"\n    elif country:\n        query += f\" WHERE C.Name = '{country}'\"\n    \n    # Group the data by year and season\n    query += \" GROUP BY T.Year, Season\"\n    \n    # Execute the query and read the results into a DataFrame\n    df = pd.read_sql_query(query, conn)\n    \n    # Close the database connection\n    conn.close()\n   \n    # Visualize the data\n    fig = px.bar(df, x='Season', y='Avg_Temperature', color='Season', title=f'Average Temperature in {season}')\n    fig.show()\n    \n    return fig\n\n\n\n\ndb_file = \"db_file\"\n\n# Define the year range\nyear_range = (2000, 2020)\n\n# Define the country (optional)\ncountry = \"USA\"\n\n# Call the function\nanalyze_seasonal_temperature_change(db_file, year_range)\n\n\n\n\n\nimport plotly.express as px\n\ndef visualize_avg_monthly_temperature_by_country(df):\n    fig = px.line(df, x='Month', y='Avg_Temperature', title='Average Monthly Temperature by Country')\n    return fig\n\ndef get_data_from_database(db_file):\n    conn = sqlite3.connect(db_file)\n    query = \"SELECT * FROM temperatures\"  # Adjust your SQL query accordingly\n    df = pd.read_sql_query(query, conn)\n    conn.close()\n    return df\n\n\nmy_df = get_data_from_database(\"db_file\")\nfig = visualize_avg_monthly_temperature_by_country(my_df)\n\nValueError: Value of 'y' is not the name of a column in 'data_frame'. Expected one of ['ID', 'Year', 'Month', 'Temp'] but received: Avg_Temperature\n\n\n\ndef visualize_monthly_temperature_trends_for_station(df):\n    fig = px.line(df, x='Month', y='Temp', color='Year', title='Monthly Temperature Trends for a Specific Station')\n    return fig"
  },
  {
    "objectID": "posts/Hw177/attempt.html",
    "href": "posts/Hw177/attempt.html",
    "title": "Myblog",
    "section": "",
    "text": "import pandas as pd\n\n\nimport sqlite3\nconn = sqlite3.connect(\"temps.db\")\n\ndf = pd.read_csv(\"temps.csv\")\ndf_iter = pd.read_csv(\"temps.csv\", chunksize = 100000)\n\n\ndef prepare_df(df):\n    df = df.set_index(keys=[\"ID\", \"Year\"])\n    df = df.stack()\n    df = df.reset_index()\n    df = df.rename(columns = {\"level_2\"  : \"Month\" , 0 : \"Temp\"})\n    df[\"Month\"] = df[\"Month\"].str[5:].astype(int)\n    df[\"Temp\"]  = df[\"Temp\"] / 100\n    return(df)\n\n# cleans the data and make sure we are using the variables we need \n\n\ndf = prepare_df(df)\ndf.head()\n\n\n\n\n\n\n\n\nID\nYear\nMonth\nTemp\n\n\n\n\n0\nACW00011604\n1961\n1\n-0.89\n\n\n1\nACW00011604\n1961\n2\n2.36\n\n\n2\nACW00011604\n1961\n3\n4.72\n\n\n3\nACW00011604\n1961\n4\n7.73\n\n\n4\nACW00011604\n1961\n5\n11.28\n\n\n\n\n\n\n\n\n#creats a table with all temps \nfor i, df in enumerate(df_iter):\n    df = prepare_df(df)\n    df.to_sql(\"temperatures\", conn, if_exists = \"replace\" if i == 0 else \"append\", index = False)\n\n\n#creats a table with all the stations \nurl = \"station-metadata.csv\"\nstations = pd.read_csv(url)\nstations.to_sql(\"stations\", conn, if_exists = \"replace\", index=False)\n\n27585\n\n\n\n#creats a table with all the countries \ncountries_url = \"https://raw.githubusercontent.com/mysociety/gaze/master/data/fips-10-4-to-iso-country-codes.csv\"\ncountries= pd.read_csv(countries_url)\ncountries.to_sql(\"countries\", conn, if_exists = \"replace\", index=False)\n\n279\n\n\n\ncursor = conn.cursor()\ncursor.execute(\"SELECT name FROM sqlite_master WHERE type='table'\")\nprint(cursor.fetchall())\n\n# prints the three tables that we have created \n\n[('temperatures',), ('stations',), ('countries',)]\n\n\n\ncursor.execute(\"SELECT sql FROM sqlite_master WHERE type='table';\")\n\nfor result in cursor.fetchall():\n    print(result[0])\n\nCREATE TABLE \"temperatures\" (\n\"ID\" TEXT,\n  \"Year\" INTEGER,\n  \"Month\" INTEGER,\n  \"Temp\" REAL\n)\nCREATE TABLE \"stations\" (\n\"ID\" TEXT,\n  \"LATITUDE\" REAL,\n  \"LONGITUDE\" REAL,\n  \"STNELEV\" REAL,\n  \"NAME\" TEXT\n)\nCREATE TABLE \"countries\" (\n\"FIPS 10-4\" TEXT,\n  \"ISO 3166\" TEXT,\n  \"Name\" TEXT\n)\n\n\n\ncursor.execute(\"SELECT id, temp FROM temperatures WHERE year AND month;\")\nresult = [cursor.fetchone() for i in range(10)]\nresult\n\n[('ACW00011604', -0.89),\n ('ACW00011604', 2.36),\n ('ACW00011604', 4.72),\n ('ACW00011604', 7.73),\n ('ACW00011604', 11.28),\n ('ACW00011604', 15.99),\n ('ACW00011604', 15.7),\n ('ACW00011604', 14.81),\n ('ACW00011604', 14.13),\n ('ACW00011604', 11.74)]\n\n\n\ncursor.execute(\"SELECT Name FROM countries;\")\nresult = [cursor.fetchone() for i in range(10)]\nresult\n\n[('Afghanistan',),\n ('Akrotiri',),\n ('Albania',),\n ('Algeria',),\n ('American Samoa',),\n ('Andorra',),\n ('Angola',),\n ('Anguilla',),\n ('Antarctica',),\n ('Antigua and Barbuda',)]\n\n\n\ncmd = \\\n\"\"\"\nSELECT T.id, T.month, T.temp\nFROM temperatures T\nLEFT JOIN countries C ON T.id = C.\"FIPS 10-4\"\nWHERE C.Name \n\"\"\"\n\ncursor.execute(cmd)\nresult = [cursor.fetchone() for i in range(10)]  # get just the first 10 results\nresult\n\n[None, None, None, None, None, None, None, None, None, None]\n\n\n\nconn.close()"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  }
]